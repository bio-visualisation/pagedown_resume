x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
library(ggplot2)
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_bw() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
install.packages("lbjdata")
library(lbjdata)
install.packages("remotes")
remotes::install_github("delabj/delabj")
devtools::install_github("utexas-lbjp-data/lbjdata")
library(lbjdata)
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(lbjdata)
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
# Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700")) +  # Modify Title's Color
scale_fill_tableau(palette = "Color Blind")
ggsave("diamonds.tiff", height = 4, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
scale_fill_tableau(palette = "Color Blind")
ggsave( p, "diamonds.tiff", height = 4, width = 5, units = "in",
dpi = 200)
ggsave("diamonds.tiff", p,  height = 4, width = 5, units = "in",
dpi = 200)
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
ggsave("diamonds.tiff", p,  height = 6, width = 5, units = "in",
dpi = 200)
ggsave("diamonds.tiff", p,  height = 6, width = 5, units = "cm",
dpi = 300)
ggsave("diamonds.tiff", p,  height = 6, width = 5, units = "in",
dpi = 300)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj(margin = margin(10, 0, 10, 0)) +  # Add The LBJ Theme
scale_fill_tableau(palette = "Color Blind")
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.title = element_text(color = "#bf5700"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(3, 3, 3, 3), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 6, width = 5, units = "in",
dpi = 300)
ggsave("diamonds.tiff", p,  height = 4, width = 5, units = "in",
dpi = 200)
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(3, 0, 0, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(4, 0, 0, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(4, 1, 0, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(4, 0, 1, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(3, 0, 1, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
p <- diamonds %>%  # Call On Your Dataset
ggplot() +  # Draw A Canvas
aes(cut, fill = cut) +  # Define How The Data Gets Mapped
geom_bar(show.legend = FALSE) +  # Define What Kind of Chart to Draw
labs(
x = "Cut",  # Specify X-Axis Label
y = "Count",  # Specify Y-Axis Label
title = "A Fancy diamonds Plot",  # Specify Title Label
subtitle = "A compelling subtitle",  # Specify Subtitle Label
caption = "Source: ggplot2 package | Data: 'diamonds'"  # Specify Source/Caption Label
) +
theme_lbj() +  # Add The LBJ Theme
theme(plot.margin = unit(c(1, 0, 1, 0), "cm"))+
scale_fill_tableau(palette = "Color Blind")  # Add A Color Blind Friendly Palette
ggsave("diamonds.tiff", p,  height = 5, width = 5, units = "in",
dpi = 200)
BiocManager::install("multiMiR")
library(multiMiR)
help(get_multimir)
data <- read.csv("control2.csv", header = T)
library(dplyr)
head(data)
help(select)
data <- read.csv("control2.csv", header = T) %>%
select(mirna)
head(data)
target <- get_multimir(org = "mmu",
mirna = data,
table = "validated",
predicted.cutoff.type = "p",
predicted.cutoff = 10,
use.tibble = TRUE)
target <- get_multimir(org = "mmu",
mirna = data,
table = "validated",
predicted.cutoff.type = "p",
predicted.cutoff = 10)
target
target@summary
target@data
write.csv(target@data, file = "miRNA_targets.csv")
#Isolate miRNAs and targets, remove missing and duplicated data
targetClean <- function(miRNA_targets) {
genes_df <- data.frame(miRNA_targets@data$mature_mirna_id,
miRNA_targets@data$target_entrez) %>%
filter(!(miRNA_targets.data.target_entrez == "")) %>%
distinct()
return(genes_df)
}
#Get target genes for each miRNA individually
indv_targets <- targetClean(target)
head(indv_targets)
write.csv(indv_targets, file = "indv_targets.csv")
return(genes_df)
#Isolate miRNAs and targets, remove missing and duplicated data
targetClean <- function(miRNA_targets) {
genes_df <- data.frame(miRNA_targets@data$mature_mirna_id,
miRNA_targets@data$target_symbol) %>%
filter(!(miRNA_targets.data.target_symbol == "")) %>%
distinct()
return(genes_df)
}
#Get target genes for each miRNA individually
indv_targets <- targetClean(target)
head(indv_targets)
write.csv(indv_targets, file = "indv_targets.csv")
#Isolate miRNAs and targets, remove missing and duplicated data
targetClean <- function(miRNA_targets) {
genes_df <- data.frame(miRNA_targets@data$mature_mirna_id,
miRNA_targets@data$target_entrez) %>%
filter(!(miRNA_targets.data.target_entrez == "")) %>%
distinct()
return(genes_df)
}
#Get target genes for each miRNA individually
indv_targets <- targetClean(target)
head(indv_targets)
### GSEA\=========================================================
#Plot top 20 results by number of genes, suitable for both GO and KEGG
plotGSEA <- function(GSEA) {
x_var <- ifelse(colnames(GSEA[1]) == "Term", "Term", "Pathway")
ggplot(GSEA[(1:20),], aes_string(x = x_var, y = "N")) +
geom_col() +
theme_classic() +
ggtitle(deparse(substitute(GSEA))) +
ylab("Number of Genes") +
scale_y_continuous(expand = c(0,0)) +
scale_x_discrete(limits = rev) +
coord_flip()
}
library(limma)
names(entrezid) <- indv_targets$miRNA_targets.data.target_entrez
df <- indv_targets$miRNA_targets.data.target_entrez
entrez_id <- indv_targets$miRNA_targets.data.target_entrez
#GO  pathway annotation
GO_all <- limma::goana(entrez_id, species = "Mm", FDR = 0.05)
#Separate dataframes by ontology, remove rownames and rank by number of genes
GO_Biological_Process <- isolateGO(GO = GO_all, ontology = "BP")
#Isolate GO results for a specific ontology, arrange output
isolateGO <- function(GO, ontology) {
stopifnot(any(str_detect(GO$Ont, ontology))) #Stop if input is invalid
output <- GO %>%
group_by(Ont) %>%
filter(Ont == ontology) %>%
reorderGSEA()
return(output)
}
#Separate dataframes by ontology, remove rownames and rank by number of genes
GO_Biological_Process <- isolateGO(GO = GO_all, ontology = "BP")
library(stringr)
#Isolate GO results for a specific ontology, arrange output
isolateGO <- function(GO, ontology) {
stopifnot(any(str_detect(GO$Ont, ontology))) #Stop if input is invalid
output <- GO %>%
group_by(Ont) %>%
filter(Ont == ontology) %>%
reorderGSEA()
return(output)
}
#Separate dataframes by ontology, remove rownames and rank by number of genes
GO_Biological_Process <- isolateGO(GO = GO_all, ontology = "BP")
#Order data by number of genes, update factors to new order
reorderGSEA <- function(GSEA) {
stopifnot(colnames(GSEA[1]) %in% c("Term", "Pathway")) #Stop if input is invalid
if (colnames(GSEA[1]) == "Term") {
output <- GSEA %>%
arrange(desc(N)) %>%
mutate(Term = factor(Term, level = Term))
} else {
output <- GSEA %>%
arrange(desc(N)) %>%
mutate(Pathway = factor(Pathway, level = Pathway))
}
return(output)
}
#Isolate GO results for a specific ontology, arrange output
isolateGO <- function(GO, ontology) {
stopifnot(any(str_detect(GO$Ont, ontology))) #Stop if input is invalid
output <- GO %>%
group_by(Ont) %>%
filter(Ont == ontology) %>%
reorderGSEA()
return(output)
}
#Separate dataframes by ontology, remove rownames and rank by number of genes
GO_Biological_Process <- isolateGO(GO = GO_all, ontology = "BP")
GO_Cellular_Component <- isolateGO(GO_all, "CC")
GO_Molecular_Function <- isolateGO(GO_all, "MF")
#Plot top 20 results by number of genes, suitable for both GO and KEGG
plotGSEA <- function(GSEA) {
x_var <- ifelse(colnames(GSEA[1]) == "Term", "Term", "Pathway")
ggplot(GSEA[(1:20),], aes_string(x = x_var, y = "N")) +
geom_col() +
theme_classic() +
ggtitle(deparse(substitute(GSEA))) +
ylab("Number of Genes") +
scale_y_continuous(expand = c(0,0)) +
scale_x_discrete(limits = rev) +
coord_flip()
}
#Create individual plots with proper format
GO_BP_Plot <- plotGSEA(GO_Biological_Process)
library(stringr)
library(ggplot2)
#Create individual plots with proper format
GO_BP_Plot <- plotGSEA(GO_Biological_Process)
GO_BP_Plot
GO_CC_Plot <- plotGSEA(GO_Cellular_Component)
GO_CC_Plot
GO_MF_Plot <- plotGSEA(GO_Molecular_Function)
GO_MF_Plot
#Arrange plots into a single figure
GSEA_Plots <- ggarrange(GO_BP_Plot, GO_CC_Plot, GO_MF_Plot,
ncol = 2, nrow = 2, labels = "AUTO", align = "hv")
library(ggpubr)
#Arrange plots into a single figure
GSEA_Plots <- ggarrange(GO_BP_Plot, GO_CC_Plot, GO_MF_Plot,
ncol = 2, nrow = 2, labels = "AUTO",
align = "hv")
GSEA_Plots
ggsave(plot = GSEA_Plots, filename = chartFile, dpi = 300)
ggsave(plot = GSEA_Plots,
filename = "GO_analysis_circ_miRNA_mRNA.tiff", dpi = 300)
ggsave(plot = GO_BP_Plot,
filename = "GO_BP_circ_miRNA_mRNA.tiff", dpi = 300)
#Isolate miRNAs and targets, remove missing and duplicated data
targetClean <- function(miRNA_targets) {
genes_df <- data.frame(miRNA_targets@data$mature_mirna_id,
miRNA_targets@data$target_entrez) %>%
filter(!(miRNA_targets.data.target_entrez == "")) %>%
distinct()
return(genes_df)
}
#Get target genes for each miRNA individually
indv_targets <- targetClean(target)
write.csv(indv_targets, file = "miRNA_entrezid.csv")
install.packages("openintro")
library(openintro)
loan50
stent30
stent365
summary(stent365)
loan50
head(loan50)
datasets::iris
datasets::women
county
usdata::county
unvotes
install.packages("unvotes")
library(unvotes)
un_votes
unvotes::
openintro::
##Base R datasets
datasets::women
unvotes::
openintro::
##Base R datasets
datasets::women
install.packages("airports")
library(airports)
airports::usairports
install.packages("tidytuesdayR")
memory.limit(80000)
setwd("~/Pagedown")
pagedown::chrome_print("https://pagedown.rbind.io", "html_paged.pdf")
